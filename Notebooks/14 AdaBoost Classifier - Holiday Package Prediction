{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2562242,"sourceType":"datasetVersion","datasetId":1554964}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/adaboost-classifier-holiday-package-prediction-539e3fa1-f287-4c34-9ada-d406cbaa6cea.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240728/auto/storage/goog4_request&X-Goog-Date=20240728T083439Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=784536010fd116c728ee03e779826d6e4b4d0f614bcce4ceb90283c810b07f2f3d4cafcda3de6abcc31289f9de2a8116a9e75ab309ddc59feece2ede65dd966f7639c1cc013586e96ede1328bb152c46f64051efbf34a0974ceffd2b47fc8e0140185fd79daa70f8b6974a2bfc4919f27cba94cfcbb0f727489cdcb67965408771f15c8c218edf5d6f9258a86ec1754e27cae7bd3628d0b9909d86ae17d1fa84a73da0a09ad4373cfa4beea299cfac93294fe80bff2db9944845d476cdf64d053f4f0bdcea10a5ab77c593b518d5caffbe980af5282598cb5a5857fd703ab5855ac04a65fac43de92fce0b8c254fee5d6ab70398ccd4d11b6be7ab845e59fd46","timestamp":1722156136007}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"markdown","source":["# AdaBoost Classifier - Implementation on Holiday Package Prediction Dataset"],"metadata":{"id":"W4mQlQjAekpN"}},{"cell_type":"markdown","source":["# About Dataset\n","\n","## Context\n","\"Trips & Travel.Com\" company wants to enable and establish a viable business model to expand the customer base. One of the ways to expand the customer base is to introduce a new offering of packages. Currently, there are 5 types of packages the company is offering - Basic, Standard, Deluxe, Super Deluxe, King. Looking at the data of the last year, we observed that 18% of the customers purchased the packages. However, the marketing cost was quite high because customers were contacted at random without looking at the available information. The company is now planning to launch a new product i.e. Wellness Tourism Package. Wellness Tourism is defined as Travel that allows the traveler to maintain, enhance or kick-start a healthy lifestyle, and support or increase one's sense of well-being. However, this time company wants to harness the available data of existing and potential customers to make the marketing expenditure more efficient.\n","\n","## Goal\n","The goal of this notebook is to implement AdaBoost Classifier on this dataset and find a model that could predict whether a given customer would buy or not buy a product based on the provided input.\n","\n","Dataset source: https://www.kaggle.com/datasets/susant4learning/holiday-package-purchase-prediction"],"metadata":{"id":"jjcdSR4WekpX"}},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import numpy as np\n","import warnings\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import accuracy_score, roc_curve, roc_auc_score, f1_score, precision_score, recall_score\n","import pickle"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:06:22.591529Z","iopub.execute_input":"2024-07-28T08:06:22.591928Z","iopub.status.idle":"2024-07-28T08:06:22.599723Z","shell.execute_reply.started":"2024-07-28T08:06:22.591896Z","shell.execute_reply":"2024-07-28T08:06:22.598258Z"},"trusted":true,"id":"9qAs6C_zekpY","executionInfo":{"status":"ok","timestamp":1722156489724,"user_tz":-330,"elapsed":535,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["%matplotlib inline\n","# warnings.filterwarnings(action='ignore')"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:02:39.712633Z","iopub.execute_input":"2024-07-28T08:02:39.713045Z","iopub.status.idle":"2024-07-28T08:02:39.718456Z","shell.execute_reply.started":"2024-07-28T08:02:39.713008Z","shell.execute_reply":"2024-07-28T08:02:39.717281Z"},"trusted":true,"id":"9KHX4cV9ekpY","executionInfo":{"status":"ok","timestamp":1722156491306,"user_tz":-330,"elapsed":822,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Impoorting the dataset\n","df = pd.read_csv(\"Datasets/Travel.csv\")"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:02:40.927719Z","iopub.execute_input":"2024-07-28T08:02:40.928123Z","iopub.status.idle":"2024-07-28T08:02:40.975009Z","shell.execute_reply.started":"2024-07-28T08:02:40.928087Z","shell.execute_reply":"2024-07-28T08:02:40.973786Z"},"trusted":true,"id":"dFdMXO_gekpZ","executionInfo":{"status":"ok","timestamp":1722156491306,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:02:41.825821Z","iopub.execute_input":"2024-07-28T08:02:41.826265Z","iopub.status.idle":"2024-07-28T08:02:41.863767Z","shell.execute_reply.started":"2024-07-28T08:02:41.82623Z","shell.execute_reply":"2024-07-28T08:02:41.86264Z"},"trusted":true,"id":"vXDiYQfCekpZ","executionInfo":{"status":"ok","timestamp":1722156491306,"user_tz":-330,"elapsed":22,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"1b3d76a9-7e86-4af5-f2df-8eb0143287a5","colab":{"base_uri":"https://localhost:8080/","height":278}},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   CustomerID  ProdTaken   Age    TypeofContact  CityTier  DurationOfPitch  \\\n","0      200000          1  41.0     Self Enquiry         3              6.0   \n","1      200001          0  49.0  Company Invited         1             14.0   \n","2      200002          1  37.0     Self Enquiry         1              8.0   \n","3      200003          0  33.0  Company Invited         1              9.0   \n","4      200004          0   NaN     Self Enquiry         1              8.0   \n","\n","       Occupation  Gender  NumberOfPersonVisiting  NumberOfFollowups  \\\n","0        Salaried  Female                       3                3.0   \n","1        Salaried    Male                       3                4.0   \n","2     Free Lancer    Male                       3                4.0   \n","3        Salaried  Female                       2                3.0   \n","4  Small Business    Male                       2                3.0   \n","\n","  ProductPitched  PreferredPropertyStar MaritalStatus  NumberOfTrips  \\\n","0         Deluxe                    3.0        Single            1.0   \n","1         Deluxe                    4.0      Divorced            2.0   \n","2          Basic                    3.0        Single            7.0   \n","3          Basic                    3.0      Divorced            2.0   \n","4          Basic                    4.0      Divorced            1.0   \n","\n","   Passport  PitchSatisfactionScore  OwnCar  NumberOfChildrenVisiting  \\\n","0         1                       2       1                       0.0   \n","1         0                       3       1                       2.0   \n","2         1                       3       0                       0.0   \n","3         1                       5       1                       1.0   \n","4         0                       5       1                       0.0   \n","\n","  Designation  MonthlyIncome  \n","0     Manager        20993.0  \n","1     Manager        20130.0  \n","2   Executive        17090.0  \n","3   Executive        17909.0  \n","4   Executive        18468.0  "],"text/html":["\n","  <div id=\"df-28160c6c-3b9f-4684-96cf-0fef8caa42ac\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CustomerID</th>\n","      <th>ProdTaken</th>\n","      <th>Age</th>\n","      <th>TypeofContact</th>\n","      <th>CityTier</th>\n","      <th>DurationOfPitch</th>\n","      <th>Occupation</th>\n","      <th>Gender</th>\n","      <th>NumberOfPersonVisiting</th>\n","      <th>NumberOfFollowups</th>\n","      <th>ProductPitched</th>\n","      <th>PreferredPropertyStar</th>\n","      <th>MaritalStatus</th>\n","      <th>NumberOfTrips</th>\n","      <th>Passport</th>\n","      <th>PitchSatisfactionScore</th>\n","      <th>OwnCar</th>\n","      <th>NumberOfChildrenVisiting</th>\n","      <th>Designation</th>\n","      <th>MonthlyIncome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>200000</td>\n","      <td>1</td>\n","      <td>41.0</td>\n","      <td>Self Enquiry</td>\n","      <td>3</td>\n","      <td>6.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>3.0</td>\n","      <td>Deluxe</td>\n","      <td>3.0</td>\n","      <td>Single</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>Manager</td>\n","      <td>20993.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200001</td>\n","      <td>0</td>\n","      <td>49.0</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>14.0</td>\n","      <td>Salaried</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>Deluxe</td>\n","      <td>4.0</td>\n","      <td>Divorced</td>\n","      <td>2.0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2.0</td>\n","      <td>Manager</td>\n","      <td>20130.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>200002</td>\n","      <td>1</td>\n","      <td>37.0</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Free Lancer</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>Basic</td>\n","      <td>3.0</td>\n","      <td>Single</td>\n","      <td>7.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>Executive</td>\n","      <td>17090.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>200003</td>\n","      <td>0</td>\n","      <td>33.0</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>9.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>2</td>\n","      <td>3.0</td>\n","      <td>Basic</td>\n","      <td>3.0</td>\n","      <td>Divorced</td>\n","      <td>2.0</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>Executive</td>\n","      <td>17909.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>200004</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Small Business</td>\n","      <td>Male</td>\n","      <td>2</td>\n","      <td>3.0</td>\n","      <td>Basic</td>\n","      <td>4.0</td>\n","      <td>Divorced</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>Executive</td>\n","      <td>18468.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28160c6c-3b9f-4684-96cf-0fef8caa42ac')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-28160c6c-3b9f-4684-96cf-0fef8caa42ac button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-28160c6c-3b9f-4684-96cf-0fef8caa42ac');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8d571755-b64b-4a25-acde-e319d93df7b4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d571755-b64b-4a25-acde-e319d93df7b4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8d571755-b64b-4a25-acde-e319d93df7b4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4888,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1411,\n        \"min\": 200000,\n        \"max\": 204887,\n        \"num_unique_values\": 4888,\n        \"samples\": [\n          200144,\n          200079,\n          202098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProdTaken\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.3163870326344,\n        \"min\": 18.0,\n        \"max\": 61.0,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          19.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TypeofContact\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Company Invited\",\n          \"Self Enquiry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CityTier\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DurationOfPitch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.519642589404391,\n        \"min\": 5.0,\n        \"max\": 127.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          13.0,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Free Lancer\",\n          \"Large Business\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfPersonVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowups\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0025086863932253,\n        \"min\": 1.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProductPitched\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Basic\",\n          \"King\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredPropertyStar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7980086787526838,\n        \"min\": 3.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Divorced\",\n          \"Unmarried\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTrips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8490193098078764,\n        \"min\": 1.0,\n        \"max\": 22.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          20.0,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Passport\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PitchSatisfactionScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OwnCar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfChildrenVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8578611646725665,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Designation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Executive\",\n          \"VP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyIncome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5380.698360691634,\n        \"min\": 1000.0,\n        \"max\": 98678.0,\n        \"num_unique_values\": 2475,\n        \"samples\": [\n          25793.0,\n          35801.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:02:43.53225Z","iopub.execute_input":"2024-07-28T08:02:43.532648Z","iopub.status.idle":"2024-07-28T08:02:43.589828Z","shell.execute_reply.started":"2024-07-28T08:02:43.532615Z","shell.execute_reply":"2024-07-28T08:02:43.588693Z"},"trusted":true,"id":"Oo83NQG_ekpZ","executionInfo":{"status":"ok","timestamp":1722156491306,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"3a4ede3e-000c-49d6-f95b-99655d2c5ec6","colab":{"base_uri":"https://localhost:8080/","height":320}},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          CustomerID    ProdTaken          Age     CityTier  DurationOfPitch  \\\n","count    4888.000000  4888.000000  4662.000000  4888.000000      4637.000000   \n","mean   202443.500000     0.188216    37.622265     1.654255        15.490835   \n","std      1411.188388     0.390925     9.316387     0.916583         8.519643   \n","min    200000.000000     0.000000    18.000000     1.000000         5.000000   \n","25%    201221.750000     0.000000    31.000000     1.000000         9.000000   \n","50%    202443.500000     0.000000    36.000000     1.000000        13.000000   \n","75%    203665.250000     0.000000    44.000000     3.000000        20.000000   \n","max    204887.000000     1.000000    61.000000     3.000000       127.000000   \n","\n","       NumberOfPersonVisiting  NumberOfFollowups  PreferredPropertyStar  \\\n","count             4888.000000        4843.000000            4862.000000   \n","mean                 2.905074           3.708445               3.581037   \n","std                  0.724891           1.002509               0.798009   \n","min                  1.000000           1.000000               3.000000   \n","25%                  2.000000           3.000000               3.000000   \n","50%                  3.000000           4.000000               3.000000   \n","75%                  3.000000           4.000000               4.000000   \n","max                  5.000000           6.000000               5.000000   \n","\n","       NumberOfTrips     Passport  PitchSatisfactionScore       OwnCar  \\\n","count    4748.000000  4888.000000             4888.000000  4888.000000   \n","mean        3.236521     0.290917                3.078151     0.620295   \n","std         1.849019     0.454232                1.365792     0.485363   \n","min         1.000000     0.000000                1.000000     0.000000   \n","25%         2.000000     0.000000                2.000000     0.000000   \n","50%         3.000000     0.000000                3.000000     1.000000   \n","75%         4.000000     1.000000                4.000000     1.000000   \n","max        22.000000     1.000000                5.000000     1.000000   \n","\n","       NumberOfChildrenVisiting  MonthlyIncome  \n","count               4822.000000    4655.000000  \n","mean                   1.187267   23619.853491  \n","std                    0.857861    5380.698361  \n","min                    0.000000    1000.000000  \n","25%                    1.000000   20346.000000  \n","50%                    1.000000   22347.000000  \n","75%                    2.000000   25571.000000  \n","max                    3.000000   98678.000000  "],"text/html":["\n","  <div id=\"df-e00777aa-4990-49f8-a839-7cf34215418c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CustomerID</th>\n","      <th>ProdTaken</th>\n","      <th>Age</th>\n","      <th>CityTier</th>\n","      <th>DurationOfPitch</th>\n","      <th>NumberOfPersonVisiting</th>\n","      <th>NumberOfFollowups</th>\n","      <th>PreferredPropertyStar</th>\n","      <th>NumberOfTrips</th>\n","      <th>Passport</th>\n","      <th>PitchSatisfactionScore</th>\n","      <th>OwnCar</th>\n","      <th>NumberOfChildrenVisiting</th>\n","      <th>MonthlyIncome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>4888.000000</td>\n","      <td>4888.000000</td>\n","      <td>4662.000000</td>\n","      <td>4888.000000</td>\n","      <td>4637.000000</td>\n","      <td>4888.000000</td>\n","      <td>4843.000000</td>\n","      <td>4862.000000</td>\n","      <td>4748.000000</td>\n","      <td>4888.000000</td>\n","      <td>4888.000000</td>\n","      <td>4888.000000</td>\n","      <td>4822.000000</td>\n","      <td>4655.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>202443.500000</td>\n","      <td>0.188216</td>\n","      <td>37.622265</td>\n","      <td>1.654255</td>\n","      <td>15.490835</td>\n","      <td>2.905074</td>\n","      <td>3.708445</td>\n","      <td>3.581037</td>\n","      <td>3.236521</td>\n","      <td>0.290917</td>\n","      <td>3.078151</td>\n","      <td>0.620295</td>\n","      <td>1.187267</td>\n","      <td>23619.853491</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1411.188388</td>\n","      <td>0.390925</td>\n","      <td>9.316387</td>\n","      <td>0.916583</td>\n","      <td>8.519643</td>\n","      <td>0.724891</td>\n","      <td>1.002509</td>\n","      <td>0.798009</td>\n","      <td>1.849019</td>\n","      <td>0.454232</td>\n","      <td>1.365792</td>\n","      <td>0.485363</td>\n","      <td>0.857861</td>\n","      <td>5380.698361</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>200000.000000</td>\n","      <td>0.000000</td>\n","      <td>18.000000</td>\n","      <td>1.000000</td>\n","      <td>5.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>201221.750000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","      <td>1.000000</td>\n","      <td>9.000000</td>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","      <td>3.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>20346.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>202443.500000</td>\n","      <td>0.000000</td>\n","      <td>36.000000</td>\n","      <td>1.000000</td>\n","      <td>13.000000</td>\n","      <td>3.000000</td>\n","      <td>4.000000</td>\n","      <td>3.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>22347.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>203665.250000</td>\n","      <td>0.000000</td>\n","      <td>44.000000</td>\n","      <td>3.000000</td>\n","      <td>20.000000</td>\n","      <td>3.000000</td>\n","      <td>4.000000</td>\n","      <td>4.000000</td>\n","      <td>4.000000</td>\n","      <td>1.000000</td>\n","      <td>4.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>25571.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>204887.000000</td>\n","      <td>1.000000</td>\n","      <td>61.000000</td>\n","      <td>3.000000</td>\n","      <td>127.000000</td>\n","      <td>5.000000</td>\n","      <td>6.000000</td>\n","      <td>5.000000</td>\n","      <td>22.000000</td>\n","      <td>1.000000</td>\n","      <td>5.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>98678.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e00777aa-4990-49f8-a839-7cf34215418c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e00777aa-4990-49f8-a839-7cf34215418c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e00777aa-4990-49f8-a839-7cf34215418c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7b3d7744-e680-45d2-9207-5925a99c8987\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b3d7744-e680-45d2-9207-5925a99c8987')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7b3d7744-e680-45d2-9207-5925a99c8987 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92271.38712763724,\n        \"min\": 1411.1883880852572,\n        \"max\": 204887.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4888.0,\n          202443.5,\n          203665.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProdTaken\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1728.0892489642579,\n        \"min\": 0.0,\n        \"max\": 4888.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.18821603927986907,\n          1.0,\n          0.390924579136507\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1636.37378895284,\n        \"min\": 9.3163870326344,\n        \"max\": 4662.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.62226512226512,\n          36.0,\n          4662.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CityTier\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1727.5847829612426,\n        \"min\": 0.9165833981223229,\n        \"max\": 4888.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.6542553191489362,\n          3.0,\n          0.9165833981223229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DurationOfPitch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1629.9307505430254,\n        \"min\": 5.0,\n        \"max\": 4637.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.490834591330602,\n          13.0,\n          4637.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfPersonVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1727.2790450655227,\n        \"min\": 0.7248905950327612,\n        \"max\": 4888.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4888.0,\n          2.9050736497545007,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowups\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1711.1127904616037,\n        \"min\": 1.0,\n        \"max\": 4843.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4843.0,\n          3.708445178608301,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredPropertyStar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1717.8466848430387,\n        \"min\": 0.7980086787526838,\n        \"max\": 4862.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          4862.0,\n          3.581036610448375,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTrips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1676.8125136212773,\n        \"min\": 1.0,\n        \"max\": 4748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.236520640269587,\n          3.0,\n          4748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Passport\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1728.030372501269,\n        \"min\": 0.0,\n        \"max\": 4888.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.2909165302782324,\n          1.0,\n          0.454231563713233\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PitchSatisfactionScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1727.1874157776706,\n        \"min\": 1.0,\n        \"max\": 4888.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.078150572831424,\n          3.0,\n          4888.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OwnCar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1727.9616562998947,\n        \"min\": 0.0,\n        \"max\": 4888.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6202945990180033,\n          1.0,\n          0.4853631676354497\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfChildrenVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1704.3778302235066,\n        \"min\": 0.0,\n        \"max\": 4822.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4822.0,\n          1.1872666943177106,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyIncome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31245.328004384523,\n        \"min\": 1000.0,\n        \"max\": 98678.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          23619.85349087003,\n          22347.0,\n          4655.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["df.info()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:02:44.988458Z","iopub.execute_input":"2024-07-28T08:02:44.988855Z","iopub.status.idle":"2024-07-28T08:02:45.018695Z","shell.execute_reply.started":"2024-07-28T08:02:44.988821Z","shell.execute_reply":"2024-07-28T08:02:45.017555Z"},"trusted":true,"id":"ZfccebaRekpZ","executionInfo":{"status":"ok","timestamp":1722156491307,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"546192d2-4c74-4961-a876-7351d19c5ac6","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4888 entries, 0 to 4887\n","Data columns (total 20 columns):\n"," #   Column                    Non-Null Count  Dtype  \n","---  ------                    --------------  -----  \n"," 0   CustomerID                4888 non-null   int64  \n"," 1   ProdTaken                 4888 non-null   int64  \n"," 2   Age                       4662 non-null   float64\n"," 3   TypeofContact             4863 non-null   object \n"," 4   CityTier                  4888 non-null   int64  \n"," 5   DurationOfPitch           4637 non-null   float64\n"," 6   Occupation                4888 non-null   object \n"," 7   Gender                    4888 non-null   object \n"," 8   NumberOfPersonVisiting    4888 non-null   int64  \n"," 9   NumberOfFollowups         4843 non-null   float64\n"," 10  ProductPitched            4888 non-null   object \n"," 11  PreferredPropertyStar     4862 non-null   float64\n"," 12  MaritalStatus             4888 non-null   object \n"," 13  NumberOfTrips             4748 non-null   float64\n"," 14  Passport                  4888 non-null   int64  \n"," 15  PitchSatisfactionScore    4888 non-null   int64  \n"," 16  OwnCar                    4888 non-null   int64  \n"," 17  NumberOfChildrenVisiting  4822 non-null   float64\n"," 18  Designation               4888 non-null   object \n"," 19  MonthlyIncome             4655 non-null   float64\n","dtypes: float64(7), int64(7), object(6)\n","memory usage: 763.9+ KB\n"]}]},{"cell_type":"markdown","source":["# Data Cleaning"],"metadata":{"id":"uCegH0Gtekpa"}},{"cell_type":"markdown","source":["* Handle Typographical Errors\n","* Handle Missing Values\n","* Handle Duplicates\n","* Check Datatypes"],"metadata":{"id":"oPcBZ57Zekpa"}},{"cell_type":"markdown","source":["## Handling Typographical Errors"],"metadata":{"id":"oIYVA7bjekpa"}},{"cell_type":"code","source":["# Printing unique entries in all categorical columns\n","# Getting a list of all categorical columns\n","cat_cols = df.select_dtypes('object').columns.to_list()\n","# Printing unique entries to check for data entry errors\n","for column in cat_cols:\n","    print(df[column].value_counts(), end=\"\\n\\n\")"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:02:51.359871Z","iopub.execute_input":"2024-07-28T08:02:51.360282Z","iopub.status.idle":"2024-07-28T08:02:51.378026Z","shell.execute_reply.started":"2024-07-28T08:02:51.36025Z","shell.execute_reply":"2024-07-28T08:02:51.37665Z"},"trusted":true,"id":"3o6OUthFekpb","executionInfo":{"status":"ok","timestamp":1722156491307,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"03508a7f-012c-4ff6-9800-73246c146466","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["TypeofContact\n","Self Enquiry       3444\n","Company Invited    1419\n","Name: count, dtype: int64\n","\n","Occupation\n","Salaried          2368\n","Small Business    2084\n","Large Business     434\n","Free Lancer          2\n","Name: count, dtype: int64\n","\n","Gender\n","Male       2916\n","Female     1817\n","Fe Male     155\n","Name: count, dtype: int64\n","\n","ProductPitched\n","Basic           1842\n","Deluxe          1732\n","Standard         742\n","Super Deluxe     342\n","King             230\n","Name: count, dtype: int64\n","\n","MaritalStatus\n","Married      2340\n","Divorced      950\n","Single        916\n","Unmarried     682\n","Name: count, dtype: int64\n","\n","Designation\n","Executive         1842\n","Manager           1732\n","Senior Manager     742\n","AVP                342\n","VP                 230\n","Name: count, dtype: int64\n","\n"]}]},{"cell_type":"markdown","source":["* The gender column has a typo- 'Female' -> 'Fe male'.\n","* In MaritalStatus Column 'Unmarried' and 'Single' can be clubbed together"],"metadata":{"id":"q9Vyj1B9ekpb"}},{"cell_type":"code","source":["# Handling typo in 'Gender' column\n","df['Gender'] = df['Gender'].replace('Fe Male', 'Female')\n","\n","# Clubbing 'Unmarried' and 'Single' in MaritalStatus column\n","df['MaritalStatus'] = df['MaritalStatus'].replace('Unmarried', 'Single')"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:02:59.14764Z","iopub.execute_input":"2024-07-28T08:02:59.148041Z","iopub.status.idle":"2024-07-28T08:02:59.158719Z","shell.execute_reply.started":"2024-07-28T08:02:59.148008Z","shell.execute_reply":"2024-07-28T08:02:59.157019Z"},"trusted":true,"id":"PIqRvLm5ekpb","executionInfo":{"status":"ok","timestamp":1722156492093,"user_tz":-330,"elapsed":798,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["df['Gender'].value_counts()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:03:00.275369Z","iopub.execute_input":"2024-07-28T08:03:00.275782Z","iopub.status.idle":"2024-07-28T08:03:00.286688Z","shell.execute_reply.started":"2024-07-28T08:03:00.275747Z","shell.execute_reply":"2024-07-28T08:03:00.285441Z"},"trusted":true,"id":"jCNz2Zz5ekpc","executionInfo":{"status":"ok","timestamp":1722156492094,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"8cb86c88-73c9-40b2-e317-f9275c0b1495","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Gender\n","Male      2916\n","Female    1972\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["df['MaritalStatus'].value_counts()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:03:01.979654Z","iopub.execute_input":"2024-07-28T08:03:01.980567Z","iopub.status.idle":"2024-07-28T08:03:01.989621Z","shell.execute_reply.started":"2024-07-28T08:03:01.980529Z","shell.execute_reply":"2024-07-28T08:03:01.988455Z"},"trusted":true,"id":"EQkadaJzekpd","executionInfo":{"status":"ok","timestamp":1722156492094,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"ab2a395f-521f-4d26-a2d4-e741e83717d5","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MaritalStatus\n","Married     2340\n","Single      1598\n","Divorced     950\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["## Handling Missing Values"],"metadata":{"id":"nHueeuiZekpd"}},{"cell_type":"code","source":["# Checking for null values\n","null = df.isnull().sum()\n","null = null[null != 0]\n","print(*null.index, sep=\", \")\n","null"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:03:05.396317Z","iopub.execute_input":"2024-07-28T08:03:05.397044Z","iopub.status.idle":"2024-07-28T08:03:05.412171Z","shell.execute_reply.started":"2024-07-28T08:03:05.397008Z","shell.execute_reply":"2024-07-28T08:03:05.411088Z"},"trusted":true,"id":"-Uyky1fKekpe","executionInfo":{"status":"ok","timestamp":1722156492094,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"78f589d2-3242-4cc9-e756-3998ec6e39f9","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Age, TypeofContact, DurationOfPitch, NumberOfFollowups, PreferredPropertyStar, NumberOfTrips, NumberOfChildrenVisiting, MonthlyIncome\n"]},{"output_type":"execute_result","data":{"text/plain":["Age                         226\n","TypeofContact                25\n","DurationOfPitch             251\n","NumberOfFollowups            45\n","PreferredPropertyStar        26\n","NumberOfTrips               140\n","NumberOfChildrenVisiting     66\n","MonthlyIncome               233\n","dtype: int64"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["Age, TypeofContact, DurationOfPitch, NumberOfFollowups, PreferredPropertyStar, NumberOfTrips, NumberOfChildrenVisiting and MonthlyIncome columns have null values"],"metadata":{"id":"OF04TBzuekpe"}},{"cell_type":"markdown","source":["### Checking for outliers"],"metadata":{"id":"6TKerVEmekpe"}},{"cell_type":"code","source":["# Number of numeric columns with missing values\n","cols = ['Age', 'DurationOfPitch', 'NumberOfFollowups', 'NumberOfTrips', 'NumberOfChildrenVisiting', 'MonthlyIncome']\n","\n","# Create subplots\n","fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(10, 5))\n","\n","# Flatten the axes array for easier iteration\n","axes = axes.flatten()\n","\n","# Plot each numeric column\n","for i, column in enumerate(cols):\n","    df.boxplot(column=column, ax=axes[i])\n","    axes[i].set_title(f'Boxplot of {column}')\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:03:08.738896Z","iopub.execute_input":"2024-07-28T08:03:08.739333Z","iopub.status.idle":"2024-07-28T08:03:09.883709Z","shell.execute_reply.started":"2024-07-28T08:03:08.7393Z","shell.execute_reply":"2024-07-28T08:03:09.882527Z"},"trusted":true,"id":"V7jw2BIvekpe","executionInfo":{"status":"ok","timestamp":1722156492930,"user_tz":-330,"elapsed":843,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"65c5d6a0-ba62-4d2b-fe6a-0f59f0725827","colab":{"base_uri":"https://localhost:8080/","height":507}},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 6 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"raw","source":["DurationOfPitch, NumberOfFollowups, NumberOfTrips and MonthlyIncome have outliers, while Age and NumberOfChildrenVisiting do not."],"metadata":{"id":"-ueitEfOekpe"}},{"cell_type":"code","source":["# Filling null values in columns without outliers with mean\n","cols_without_outliers = ['Age', 'NumberOfChildrenVisiting']\n","\n","# Calculating Mean\n","mean = df[cols_without_outliers].mean()\n","\n","# Filling\n","df[cols_without_outliers] = df[cols_without_outliers].fillna(value=mean)\n","df.isnull().sum()[cols_without_outliers]"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:03:43.908979Z","iopub.execute_input":"2024-07-28T08:03:43.909377Z","iopub.status.idle":"2024-07-28T08:03:43.93035Z","shell.execute_reply.started":"2024-07-28T08:03:43.909346Z","shell.execute_reply":"2024-07-28T08:03:43.929065Z"},"trusted":true,"id":"9lEBmOQdekpe","executionInfo":{"status":"ok","timestamp":1722156492931,"user_tz":-330,"elapsed":27,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"5e1582b1-1ab9-4583-9eb4-1d3a2dd6be22","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Age                         0\n","NumberOfChildrenVisiting    0\n","dtype: int64"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# Filling null values in columns with outliers with median\n","cols_with_outliers = ['DurationOfPitch', 'NumberOfFollowups', 'NumberOfTrips', 'MonthlyIncome']\n","\n","# Calculating Median\n","median = df[cols_with_outliers].median()\n","\n","# Filling\n","df[cols_with_outliers] = df[cols_with_outliers].fillna(value=median)\n","df.isnull().sum()[cols_with_outliers]"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:03:45.117219Z","iopub.execute_input":"2024-07-28T08:03:45.117643Z","iopub.status.idle":"2024-07-28T08:03:45.140358Z","shell.execute_reply.started":"2024-07-28T08:03:45.117608Z","shell.execute_reply":"2024-07-28T08:03:45.139267Z"},"trusted":true,"id":"ln09KVOYekpe","executionInfo":{"status":"ok","timestamp":1722156492933,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"c9dbb9d3-39b5-4268-fdf7-457c6e383e97","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DurationOfPitch      0\n","NumberOfFollowups    0\n","NumberOfTrips        0\n","MonthlyIncome        0\n","dtype: int64"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# Fillinf Categorical Features with mode\n","cat_features = ['TypeofContact', 'PreferredPropertyStar']\n","\n","# Calculating Mode\n","mode = df[cat_features].mode()\n","# Converting Mode from DataFrame to series\n","mode = mode.iloc[0]\n","\n","# Fillinf\n","df[cat_features] = df[cat_features].fillna(value=mode)\n","df.isnull().sum()[cat_features]"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:03:48.26332Z","iopub.execute_input":"2024-07-28T08:03:48.264279Z","iopub.status.idle":"2024-07-28T08:03:48.291677Z","shell.execute_reply.started":"2024-07-28T08:03:48.264234Z","shell.execute_reply":"2024-07-28T08:03:48.290513Z"},"trusted":true,"id":"9aBNXLGZekpf","executionInfo":{"status":"ok","timestamp":1722156492933,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"21315bd1-1b35-4b2c-f9f8-fc43d417535c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TypeofContact            0\n","PreferredPropertyStar    0\n","dtype: int64"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Final Check for Null values\n","df.isnull().sum()"],"metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-07-28T08:03:49.838434Z","iopub.execute_input":"2024-07-28T08:03:49.83885Z","iopub.status.idle":"2024-07-28T08:03:49.853869Z","shell.execute_reply.started":"2024-07-28T08:03:49.838813Z","shell.execute_reply":"2024-07-28T08:03:49.85257Z"},"trusted":true,"id":"G7qKQkiwekpf","executionInfo":{"status":"ok","timestamp":1722156492933,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"fe0a11f5-4913-4151-8bec-dcee96f85b66","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CustomerID                  0\n","ProdTaken                   0\n","Age                         0\n","TypeofContact               0\n","CityTier                    0\n","DurationOfPitch             0\n","Occupation                  0\n","Gender                      0\n","NumberOfPersonVisiting      0\n","NumberOfFollowups           0\n","ProductPitched              0\n","PreferredPropertyStar       0\n","MaritalStatus               0\n","NumberOfTrips               0\n","Passport                    0\n","PitchSatisfactionScore      0\n","OwnCar                      0\n","NumberOfChildrenVisiting    0\n","Designation                 0\n","MonthlyIncome               0\n","dtype: int64"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["## Handling Duplicates"],"metadata":{"id":"kPSIZRT7ekpf"}},{"cell_type":"code","source":["# Viewing duplicate rows\n","df[df.duplicated(keep=False)]"],"metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-07-28T08:03:57.798349Z","iopub.execute_input":"2024-07-28T08:03:57.798756Z","iopub.status.idle":"2024-07-28T08:03:57.823743Z","shell.execute_reply.started":"2024-07-28T08:03:57.798722Z","shell.execute_reply":"2024-07-28T08:03:57.822307Z"},"trusted":true,"id":"Q-plhk3Oekpf","executionInfo":{"status":"ok","timestamp":1722156494473,"user_tz":-330,"elapsed":1553,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"902992f3-26e4-4e68-c87e-61b4824a3182","colab":{"base_uri":"https://localhost:8080/","height":73}},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [CustomerID, ProdTaken, Age, TypeofContact, CityTier, DurationOfPitch, Occupation, Gender, NumberOfPersonVisiting, NumberOfFollowups, ProductPitched, PreferredPropertyStar, MaritalStatus, NumberOfTrips, Passport, PitchSatisfactionScore, OwnCar, NumberOfChildrenVisiting, Designation, MonthlyIncome]\n","Index: []"],"text/html":["\n","  <div id=\"df-c680920c-e732-4c41-8c51-3df24e1af00e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CustomerID</th>\n","      <th>ProdTaken</th>\n","      <th>Age</th>\n","      <th>TypeofContact</th>\n","      <th>CityTier</th>\n","      <th>DurationOfPitch</th>\n","      <th>Occupation</th>\n","      <th>Gender</th>\n","      <th>NumberOfPersonVisiting</th>\n","      <th>NumberOfFollowups</th>\n","      <th>ProductPitched</th>\n","      <th>PreferredPropertyStar</th>\n","      <th>MaritalStatus</th>\n","      <th>NumberOfTrips</th>\n","      <th>Passport</th>\n","      <th>PitchSatisfactionScore</th>\n","      <th>OwnCar</th>\n","      <th>NumberOfChildrenVisiting</th>\n","      <th>Designation</th>\n","      <th>MonthlyIncome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c680920c-e732-4c41-8c51-3df24e1af00e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c680920c-e732-4c41-8c51-3df24e1af00e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c680920c-e732-4c41-8c51-3df24e1af00e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","repr_error":"Out of range float values are not JSON compliant: nan"}},"metadata":{},"execution_count":25}]},{"cell_type":"raw","source":["There are no duplicate rows."],"metadata":{"id":"bKwiycqSekpg"}},{"cell_type":"markdown","source":["## Handling Datatypes"],"metadata":{"id":"c3XKPkUGekpg"}},{"cell_type":"code","source":["df.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:01.044361Z","iopub.execute_input":"2024-07-28T08:04:01.044767Z","iopub.status.idle":"2024-07-28T08:04:01.072595Z","shell.execute_reply.started":"2024-07-28T08:04:01.044734Z","shell.execute_reply":"2024-07-28T08:04:01.071064Z"},"trusted":true,"id":"yG1TZHL7ekpg","executionInfo":{"status":"ok","timestamp":1722156494473,"user_tz":-330,"elapsed":72,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"327e3e64-78d0-45df-d7ee-4e632c90542d","colab":{"base_uri":"https://localhost:8080/","height":278}},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   CustomerID  ProdTaken        Age    TypeofContact  CityTier  \\\n","0      200000          1  41.000000     Self Enquiry         3   \n","1      200001          0  49.000000  Company Invited         1   \n","2      200002          1  37.000000     Self Enquiry         1   \n","3      200003          0  33.000000  Company Invited         1   \n","4      200004          0  37.622265     Self Enquiry         1   \n","\n","   DurationOfPitch      Occupation  Gender  NumberOfPersonVisiting  \\\n","0              6.0        Salaried  Female                       3   \n","1             14.0        Salaried    Male                       3   \n","2              8.0     Free Lancer    Male                       3   \n","3              9.0        Salaried  Female                       2   \n","4              8.0  Small Business    Male                       2   \n","\n","   NumberOfFollowups ProductPitched  PreferredPropertyStar MaritalStatus  \\\n","0                3.0         Deluxe                    3.0        Single   \n","1                4.0         Deluxe                    4.0      Divorced   \n","2                4.0          Basic                    3.0        Single   \n","3                3.0          Basic                    3.0      Divorced   \n","4                3.0          Basic                    4.0      Divorced   \n","\n","   NumberOfTrips  Passport  PitchSatisfactionScore  OwnCar  \\\n","0            1.0         1                       2       1   \n","1            2.0         0                       3       1   \n","2            7.0         1                       3       0   \n","3            2.0         1                       5       1   \n","4            1.0         0                       5       1   \n","\n","   NumberOfChildrenVisiting Designation  MonthlyIncome  \n","0                       0.0     Manager        20993.0  \n","1                       2.0     Manager        20130.0  \n","2                       0.0   Executive        17090.0  \n","3                       1.0   Executive        17909.0  \n","4                       0.0   Executive        18468.0  "],"text/html":["\n","  <div id=\"df-74eb832d-9302-4d17-a6af-1fe268500a97\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CustomerID</th>\n","      <th>ProdTaken</th>\n","      <th>Age</th>\n","      <th>TypeofContact</th>\n","      <th>CityTier</th>\n","      <th>DurationOfPitch</th>\n","      <th>Occupation</th>\n","      <th>Gender</th>\n","      <th>NumberOfPersonVisiting</th>\n","      <th>NumberOfFollowups</th>\n","      <th>ProductPitched</th>\n","      <th>PreferredPropertyStar</th>\n","      <th>MaritalStatus</th>\n","      <th>NumberOfTrips</th>\n","      <th>Passport</th>\n","      <th>PitchSatisfactionScore</th>\n","      <th>OwnCar</th>\n","      <th>NumberOfChildrenVisiting</th>\n","      <th>Designation</th>\n","      <th>MonthlyIncome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>200000</td>\n","      <td>1</td>\n","      <td>41.000000</td>\n","      <td>Self Enquiry</td>\n","      <td>3</td>\n","      <td>6.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>3.0</td>\n","      <td>Deluxe</td>\n","      <td>3.0</td>\n","      <td>Single</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>Manager</td>\n","      <td>20993.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200001</td>\n","      <td>0</td>\n","      <td>49.000000</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>14.0</td>\n","      <td>Salaried</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>Deluxe</td>\n","      <td>4.0</td>\n","      <td>Divorced</td>\n","      <td>2.0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2.0</td>\n","      <td>Manager</td>\n","      <td>20130.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>200002</td>\n","      <td>1</td>\n","      <td>37.000000</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Free Lancer</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>Basic</td>\n","      <td>3.0</td>\n","      <td>Single</td>\n","      <td>7.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>Executive</td>\n","      <td>17090.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>200003</td>\n","      <td>0</td>\n","      <td>33.000000</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>9.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>2</td>\n","      <td>3.0</td>\n","      <td>Basic</td>\n","      <td>3.0</td>\n","      <td>Divorced</td>\n","      <td>2.0</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>Executive</td>\n","      <td>17909.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>200004</td>\n","      <td>0</td>\n","      <td>37.622265</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Small Business</td>\n","      <td>Male</td>\n","      <td>2</td>\n","      <td>3.0</td>\n","      <td>Basic</td>\n","      <td>4.0</td>\n","      <td>Divorced</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>Executive</td>\n","      <td>18468.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74eb832d-9302-4d17-a6af-1fe268500a97')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-74eb832d-9302-4d17-a6af-1fe268500a97 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-74eb832d-9302-4d17-a6af-1fe268500a97');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-34a3c2c4-e9ff-4985-a378-bb7fa6ebb16a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34a3c2c4-e9ff-4985-a378-bb7fa6ebb16a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-34a3c2c4-e9ff-4985-a378-bb7fa6ebb16a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4888,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1411,\n        \"min\": 200000,\n        \"max\": 204887,\n        \"num_unique_values\": 4888,\n        \"samples\": [\n          200144,\n          200079,\n          202098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProdTaken\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.098418394794896,\n        \"min\": 18.0,\n        \"max\": 61.0,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          57.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TypeofContact\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Company Invited\",\n          \"Self Enquiry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CityTier\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DurationOfPitch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.316166022934667,\n        \"min\": 5.0,\n        \"max\": 127.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          13.0,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Free Lancer\",\n          \"Large Business\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfPersonVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowups\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.998270918304275,\n        \"min\": 1.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProductPitched\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Basic\",\n          \"King\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredPropertyStar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7970046463674917,\n        \"min\": 3.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Single\",\n          \"Divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTrips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8227690987957865,\n        \"min\": 1.0,\n        \"max\": 22.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          20.0,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Passport\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PitchSatisfactionScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OwnCar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfChildrenVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8520486722287397,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Designation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Executive\",\n          \"VP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyIncome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5257.862921264005,\n        \"min\": 1000.0,\n        \"max\": 98678.0,\n        \"num_unique_values\": 2475,\n        \"samples\": [\n          24204.0,\n          36739.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["df.dtypes"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:01.391314Z","iopub.execute_input":"2024-07-28T08:04:01.392073Z","iopub.status.idle":"2024-07-28T08:04:01.401325Z","shell.execute_reply.started":"2024-07-28T08:04:01.392033Z","shell.execute_reply":"2024-07-28T08:04:01.40013Z"},"trusted":true,"id":"gso44pVrekpg","executionInfo":{"status":"ok","timestamp":1722156494474,"user_tz":-330,"elapsed":70,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"f299d2c0-f70c-453a-a3f6-c9ae1463367e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CustomerID                    int64\n","ProdTaken                     int64\n","Age                         float64\n","TypeofContact                object\n","CityTier                      int64\n","DurationOfPitch             float64\n","Occupation                   object\n","Gender                       object\n","NumberOfPersonVisiting        int64\n","NumberOfFollowups           float64\n","ProductPitched               object\n","PreferredPropertyStar       float64\n","MaritalStatus                object\n","NumberOfTrips               float64\n","Passport                      int64\n","PitchSatisfactionScore        int64\n","OwnCar                        int64\n","NumberOfChildrenVisiting    float64\n","Designation                  object\n","MonthlyIncome               float64\n","dtype: object"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","source":["Columns to convert:\n","\n","* to int: Age, NumberOfFollowups, PreferredPropertyStar, NumberOfTrips, NumberOfChildrenVisiting\n","\n","* to category: 'ProdTaken', 'TypeofContact', 'CityTier', 'Occupation', 'Gender', 'ProductPitched',                                                          'PreferredPropertyStar','MaritalStatus','Passport', 'OwnCar', 'Designation'"],"metadata":{"id":"X160khkSekpg"}},{"cell_type":"code","source":["# Integer columns\n","int_columns = ['Age', 'NumberOfFollowups', 'PreferredPropertyStar', 'NumberOfTrips', 'NumberOfChildrenVisiting']\n","df[int_columns] = df[int_columns].astype('int')\n","df[int_columns].dtypes"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:06.23148Z","iopub.execute_input":"2024-07-28T08:04:06.231903Z","iopub.status.idle":"2024-07-28T08:04:06.247376Z","shell.execute_reply.started":"2024-07-28T08:04:06.231867Z","shell.execute_reply":"2024-07-28T08:04:06.246148Z"},"trusted":true,"id":"Mje78QkWekph","executionInfo":{"status":"ok","timestamp":1722156494474,"user_tz":-330,"elapsed":63,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"07762248-3110-4e96-d53b-a36047dbd971","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Age                         int64\n","NumberOfFollowups           int64\n","PreferredPropertyStar       int64\n","NumberOfTrips               int64\n","NumberOfChildrenVisiting    int64\n","dtype: object"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# Category Columns\n","cat_columns = ['ProdTaken', 'TypeofContact', 'CityTier', 'Occupation', 'Gender', 'ProductPitched', 'PreferredPropertyStar',\n","               'MaritalStatus','Passport', 'OwnCar', 'Designation']\n","df[cat_columns] = df[cat_columns].astype('category')\n","df[cat_columns].dtypes"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:06.680287Z","iopub.execute_input":"2024-07-28T08:04:06.68066Z","iopub.status.idle":"2024-07-28T08:04:06.707238Z","shell.execute_reply.started":"2024-07-28T08:04:06.680631Z","shell.execute_reply":"2024-07-28T08:04:06.70609Z"},"trusted":true,"id":"sGaGwJEcekph","executionInfo":{"status":"ok","timestamp":1722156494475,"user_tz":-330,"elapsed":59,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"28676792-f136-4518-eba9-36c39a0d4ef3","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ProdTaken                category\n","TypeofContact            category\n","CityTier                 category\n","Occupation               category\n","Gender                   category\n","ProductPitched           category\n","PreferredPropertyStar    category\n","MaritalStatus            category\n","Passport                 category\n","OwnCar                   category\n","Designation              category\n","dtype: object"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# Final Check for dtypes\n","df.dtypes"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:08.591568Z","iopub.execute_input":"2024-07-28T08:04:08.591991Z","iopub.status.idle":"2024-07-28T08:04:08.600727Z","shell.execute_reply.started":"2024-07-28T08:04:08.591954Z","shell.execute_reply":"2024-07-28T08:04:08.599664Z"},"trusted":true,"id":"EHDdZCPhekph","executionInfo":{"status":"ok","timestamp":1722156494475,"user_tz":-330,"elapsed":55,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"f3363756-0882-412c-8d36-ae381e727f7e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CustomerID                     int64\n","ProdTaken                   category\n","Age                            int64\n","TypeofContact               category\n","CityTier                    category\n","DurationOfPitch              float64\n","Occupation                  category\n","Gender                      category\n","NumberOfPersonVisiting         int64\n","NumberOfFollowups              int64\n","ProductPitched              category\n","PreferredPropertyStar       category\n","MaritalStatus               category\n","NumberOfTrips                  int64\n","Passport                    category\n","PitchSatisfactionScore         int64\n","OwnCar                      category\n","NumberOfChildrenVisiting       int64\n","Designation                 category\n","MonthlyIncome                float64\n","dtype: object"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["# Feature Engineering"],"metadata":{"id":"1ks4fjnfekph"}},{"cell_type":"code","source":["df.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:13.355497Z","iopub.execute_input":"2024-07-28T08:04:13.355872Z","iopub.status.idle":"2024-07-28T08:04:13.382596Z","shell.execute_reply.started":"2024-07-28T08:04:13.355842Z","shell.execute_reply":"2024-07-28T08:04:13.381273Z"},"trusted":true,"id":"IgOUwfsDekph","executionInfo":{"status":"ok","timestamp":1722156494476,"user_tz":-330,"elapsed":52,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"768465aa-6315-45e2-de36-d74e4871fb02","colab":{"base_uri":"https://localhost:8080/","height":278}},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   CustomerID ProdTaken  Age    TypeofContact CityTier  DurationOfPitch  \\\n","0      200000         1   41     Self Enquiry        3              6.0   \n","1      200001         0   49  Company Invited        1             14.0   \n","2      200002         1   37     Self Enquiry        1              8.0   \n","3      200003         0   33  Company Invited        1              9.0   \n","4      200004         0   37     Self Enquiry        1              8.0   \n","\n","       Occupation  Gender  NumberOfPersonVisiting  NumberOfFollowups  \\\n","0        Salaried  Female                       3                  3   \n","1        Salaried    Male                       3                  4   \n","2     Free Lancer    Male                       3                  4   \n","3        Salaried  Female                       2                  3   \n","4  Small Business    Male                       2                  3   \n","\n","  ProductPitched PreferredPropertyStar MaritalStatus  NumberOfTrips Passport  \\\n","0         Deluxe                     3        Single              1        1   \n","1         Deluxe                     4      Divorced              2        0   \n","2          Basic                     3        Single              7        1   \n","3          Basic                     3      Divorced              2        1   \n","4          Basic                     4      Divorced              1        0   \n","\n","   PitchSatisfactionScore OwnCar  NumberOfChildrenVisiting Designation  \\\n","0                       2      1                         0     Manager   \n","1                       3      1                         2     Manager   \n","2                       3      0                         0   Executive   \n","3                       5      1                         1   Executive   \n","4                       5      1                         0   Executive   \n","\n","   MonthlyIncome  \n","0        20993.0  \n","1        20130.0  \n","2        17090.0  \n","3        17909.0  \n","4        18468.0  "],"text/html":["\n","  <div id=\"df-97a86f55-6c37-46da-822a-9f57d6505c7e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CustomerID</th>\n","      <th>ProdTaken</th>\n","      <th>Age</th>\n","      <th>TypeofContact</th>\n","      <th>CityTier</th>\n","      <th>DurationOfPitch</th>\n","      <th>Occupation</th>\n","      <th>Gender</th>\n","      <th>NumberOfPersonVisiting</th>\n","      <th>NumberOfFollowups</th>\n","      <th>ProductPitched</th>\n","      <th>PreferredPropertyStar</th>\n","      <th>MaritalStatus</th>\n","      <th>NumberOfTrips</th>\n","      <th>Passport</th>\n","      <th>PitchSatisfactionScore</th>\n","      <th>OwnCar</th>\n","      <th>NumberOfChildrenVisiting</th>\n","      <th>Designation</th>\n","      <th>MonthlyIncome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>200000</td>\n","      <td>1</td>\n","      <td>41</td>\n","      <td>Self Enquiry</td>\n","      <td>3</td>\n","      <td>6.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>Deluxe</td>\n","      <td>3</td>\n","      <td>Single</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Manager</td>\n","      <td>20993.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200001</td>\n","      <td>0</td>\n","      <td>49</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>14.0</td>\n","      <td>Salaried</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>Deluxe</td>\n","      <td>4</td>\n","      <td>Divorced</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Manager</td>\n","      <td>20130.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>200002</td>\n","      <td>1</td>\n","      <td>37</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Free Lancer</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>Basic</td>\n","      <td>3</td>\n","      <td>Single</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Executive</td>\n","      <td>17090.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>200003</td>\n","      <td>0</td>\n","      <td>33</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>9.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>Basic</td>\n","      <td>3</td>\n","      <td>Divorced</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Executive</td>\n","      <td>17909.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>200004</td>\n","      <td>0</td>\n","      <td>37</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Small Business</td>\n","      <td>Male</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>Basic</td>\n","      <td>4</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Executive</td>\n","      <td>18468.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97a86f55-6c37-46da-822a-9f57d6505c7e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-97a86f55-6c37-46da-822a-9f57d6505c7e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-97a86f55-6c37-46da-822a-9f57d6505c7e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-13ea0f53-f49e-45ff-a941-1630503d6b60\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13ea0f53-f49e-45ff-a941-1630503d6b60')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-13ea0f53-f49e-45ff-a941-1630503d6b60 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4888,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1411,\n        \"min\": 200000,\n        \"max\": 204887,\n        \"num_unique_values\": 4888,\n        \"samples\": [\n          200144,\n          200079,\n          202098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProdTaken\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 18,\n        \"max\": 61,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          19,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TypeofContact\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Company Invited\",\n          \"Self Enquiry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CityTier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DurationOfPitch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.316166022934667,\n        \"min\": 5.0,\n        \"max\": 127.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          13.0,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Free Lancer\",\n          \"Large Business\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfPersonVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowups\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProductPitched\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Basic\",\n          \"King\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredPropertyStar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Single\",\n          \"Divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTrips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 22,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          20,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Passport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PitchSatisfactionScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OwnCar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfChildrenVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Designation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Executive\",\n          \"VP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyIncome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5257.862921264005,\n        \"min\": 1000.0,\n        \"max\": 98678.0,\n        \"num_unique_values\": 2475,\n        \"samples\": [\n          24204.0,\n          36739.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# Dropping CustomerID column\n","df = df.drop(columns=['CustomerID'])\n","df.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:16.778283Z","iopub.execute_input":"2024-07-28T08:04:16.778734Z","iopub.status.idle":"2024-07-28T08:04:16.807231Z","shell.execute_reply.started":"2024-07-28T08:04:16.778698Z","shell.execute_reply":"2024-07-28T08:04:16.806051Z"},"trusted":true,"id":"WKIjltSvekpp","executionInfo":{"status":"ok","timestamp":1722156494476,"user_tz":-330,"elapsed":50,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"6cfd3001-6ccb-43b3-afe4-7218c072fbfc","colab":{"base_uri":"https://localhost:8080/","height":278}},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  ProdTaken  Age    TypeofContact CityTier  DurationOfPitch      Occupation  \\\n","0         1   41     Self Enquiry        3              6.0        Salaried   \n","1         0   49  Company Invited        1             14.0        Salaried   \n","2         1   37     Self Enquiry        1              8.0     Free Lancer   \n","3         0   33  Company Invited        1              9.0        Salaried   \n","4         0   37     Self Enquiry        1              8.0  Small Business   \n","\n","   Gender  NumberOfPersonVisiting  NumberOfFollowups ProductPitched  \\\n","0  Female                       3                  3         Deluxe   \n","1    Male                       3                  4         Deluxe   \n","2    Male                       3                  4          Basic   \n","3  Female                       2                  3          Basic   \n","4    Male                       2                  3          Basic   \n","\n","  PreferredPropertyStar MaritalStatus  NumberOfTrips Passport  \\\n","0                     3        Single              1        1   \n","1                     4      Divorced              2        0   \n","2                     3        Single              7        1   \n","3                     3      Divorced              2        1   \n","4                     4      Divorced              1        0   \n","\n","   PitchSatisfactionScore OwnCar  NumberOfChildrenVisiting Designation  \\\n","0                       2      1                         0     Manager   \n","1                       3      1                         2     Manager   \n","2                       3      0                         0   Executive   \n","3                       5      1                         1   Executive   \n","4                       5      1                         0   Executive   \n","\n","   MonthlyIncome  \n","0        20993.0  \n","1        20130.0  \n","2        17090.0  \n","3        17909.0  \n","4        18468.0  "],"text/html":["\n","  <div id=\"df-4e159bb4-27fe-41db-867b-20c9c4bd2c41\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ProdTaken</th>\n","      <th>Age</th>\n","      <th>TypeofContact</th>\n","      <th>CityTier</th>\n","      <th>DurationOfPitch</th>\n","      <th>Occupation</th>\n","      <th>Gender</th>\n","      <th>NumberOfPersonVisiting</th>\n","      <th>NumberOfFollowups</th>\n","      <th>ProductPitched</th>\n","      <th>PreferredPropertyStar</th>\n","      <th>MaritalStatus</th>\n","      <th>NumberOfTrips</th>\n","      <th>Passport</th>\n","      <th>PitchSatisfactionScore</th>\n","      <th>OwnCar</th>\n","      <th>NumberOfChildrenVisiting</th>\n","      <th>Designation</th>\n","      <th>MonthlyIncome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>41</td>\n","      <td>Self Enquiry</td>\n","      <td>3</td>\n","      <td>6.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>Deluxe</td>\n","      <td>3</td>\n","      <td>Single</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Manager</td>\n","      <td>20993.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>49</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>14.0</td>\n","      <td>Salaried</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>Deluxe</td>\n","      <td>4</td>\n","      <td>Divorced</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Manager</td>\n","      <td>20130.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>37</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Free Lancer</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>Basic</td>\n","      <td>3</td>\n","      <td>Single</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Executive</td>\n","      <td>17090.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>33</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>9.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>Basic</td>\n","      <td>3</td>\n","      <td>Divorced</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Executive</td>\n","      <td>17909.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>37</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Small Business</td>\n","      <td>Male</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>Basic</td>\n","      <td>4</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Executive</td>\n","      <td>18468.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e159bb4-27fe-41db-867b-20c9c4bd2c41')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4e159bb4-27fe-41db-867b-20c9c4bd2c41 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4e159bb4-27fe-41db-867b-20c9c4bd2c41');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9e7d4d0a-dcb4-461a-9b94-8375e44df27e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e7d4d0a-dcb4-461a-9b94-8375e44df27e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9e7d4d0a-dcb4-461a-9b94-8375e44df27e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4888,\n  \"fields\": [\n    {\n      \"column\": \"ProdTaken\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 18,\n        \"max\": 61,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          19,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TypeofContact\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Company Invited\",\n          \"Self Enquiry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CityTier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DurationOfPitch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.316166022934667,\n        \"min\": 5.0,\n        \"max\": 127.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          13.0,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Free Lancer\",\n          \"Large Business\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfPersonVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowups\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProductPitched\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Basic\",\n          \"King\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredPropertyStar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Single\",\n          \"Divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTrips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 22,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          20,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Passport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PitchSatisfactionScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OwnCar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfChildrenVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Designation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Executive\",\n          \"VP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyIncome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5257.862921264005,\n        \"min\": 1000.0,\n        \"max\": 98678.0,\n        \"num_unique_values\": 2475,\n        \"samples\": [\n          24204.0,\n          36739.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","source":["# Correlations"],"metadata":{"id":"npJFhlg-ekpq"}},{"cell_type":"code","source":["corr = df.corr(numeric_only=True)\n","plt.figure(figsize=(15, 10))\n","sns.heatmap(data=corr, annot=True, cmap='Pastel1');"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:19.603119Z","iopub.execute_input":"2024-07-28T08:04:19.603563Z","iopub.status.idle":"2024-07-28T08:04:20.26176Z","shell.execute_reply.started":"2024-07-28T08:04:19.603527Z","shell.execute_reply":"2024-07-28T08:04:20.260159Z"},"trusted":true,"id":"ldr0fXdlekpq","executionInfo":{"status":"ok","timestamp":1722156494476,"user_tz":-330,"elapsed":48,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"c8a41937-6df6-4191-e358-a717b299d4cf","colab":{"base_uri":"https://localhost:8080/","height":1000}},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"raw","source":["NumberOfChilderenVisiting and NumberOfPersonVisiting features have a slightly high correlation of 0.61, but that does not seem very high."],"metadata":{"id":"n5TlD6Ljekpr"}},{"cell_type":"markdown","source":["# Train Test Split"],"metadata":{"id":"WDpN7hc4ekpr"}},{"cell_type":"code","source":["# Independent Features\n","X = df.drop(columns='ProdTaken', axis=1)\n","# Dependent Features\n","y = df['ProdTaken']"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:25.750436Z","iopub.execute_input":"2024-07-28T08:04:25.750851Z","iopub.status.idle":"2024-07-28T08:04:25.759533Z","shell.execute_reply.started":"2024-07-28T08:04:25.750812Z","shell.execute_reply":"2024-07-28T08:04:25.758237Z"},"trusted":true,"id":"qD1X1h54ekpr","executionInfo":{"status":"ok","timestamp":1722156494476,"user_tz":-330,"elapsed":43,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["X.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:27.473317Z","iopub.execute_input":"2024-07-28T08:04:27.473716Z","iopub.status.idle":"2024-07-28T08:04:27.498447Z","shell.execute_reply.started":"2024-07-28T08:04:27.473686Z","shell.execute_reply":"2024-07-28T08:04:27.497014Z"},"trusted":true,"id":"dHu9YcJiekpr","executionInfo":{"status":"ok","timestamp":1722156495216,"user_tz":-330,"elapsed":783,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"db36b1ae-7191-44e9-913e-c947dd96c290","colab":{"base_uri":"https://localhost:8080/","height":278}},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Age    TypeofContact CityTier  DurationOfPitch      Occupation  Gender  \\\n","0   41     Self Enquiry        3              6.0        Salaried  Female   \n","1   49  Company Invited        1             14.0        Salaried    Male   \n","2   37     Self Enquiry        1              8.0     Free Lancer    Male   \n","3   33  Company Invited        1              9.0        Salaried  Female   \n","4   37     Self Enquiry        1              8.0  Small Business    Male   \n","\n","   NumberOfPersonVisiting  NumberOfFollowups ProductPitched  \\\n","0                       3                  3         Deluxe   \n","1                       3                  4         Deluxe   \n","2                       3                  4          Basic   \n","3                       2                  3          Basic   \n","4                       2                  3          Basic   \n","\n","  PreferredPropertyStar MaritalStatus  NumberOfTrips Passport  \\\n","0                     3        Single              1        1   \n","1                     4      Divorced              2        0   \n","2                     3        Single              7        1   \n","3                     3      Divorced              2        1   \n","4                     4      Divorced              1        0   \n","\n","   PitchSatisfactionScore OwnCar  NumberOfChildrenVisiting Designation  \\\n","0                       2      1                         0     Manager   \n","1                       3      1                         2     Manager   \n","2                       3      0                         0   Executive   \n","3                       5      1                         1   Executive   \n","4                       5      1                         0   Executive   \n","\n","   MonthlyIncome  \n","0        20993.0  \n","1        20130.0  \n","2        17090.0  \n","3        17909.0  \n","4        18468.0  "],"text/html":["\n","  <div id=\"df-dfc6bec4-4104-4f06-864e-e16b824dab5d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>TypeofContact</th>\n","      <th>CityTier</th>\n","      <th>DurationOfPitch</th>\n","      <th>Occupation</th>\n","      <th>Gender</th>\n","      <th>NumberOfPersonVisiting</th>\n","      <th>NumberOfFollowups</th>\n","      <th>ProductPitched</th>\n","      <th>PreferredPropertyStar</th>\n","      <th>MaritalStatus</th>\n","      <th>NumberOfTrips</th>\n","      <th>Passport</th>\n","      <th>PitchSatisfactionScore</th>\n","      <th>OwnCar</th>\n","      <th>NumberOfChildrenVisiting</th>\n","      <th>Designation</th>\n","      <th>MonthlyIncome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>41</td>\n","      <td>Self Enquiry</td>\n","      <td>3</td>\n","      <td>6.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>Deluxe</td>\n","      <td>3</td>\n","      <td>Single</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Manager</td>\n","      <td>20993.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>49</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>14.0</td>\n","      <td>Salaried</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>Deluxe</td>\n","      <td>4</td>\n","      <td>Divorced</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Manager</td>\n","      <td>20130.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>37</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Free Lancer</td>\n","      <td>Male</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>Basic</td>\n","      <td>3</td>\n","      <td>Single</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Executive</td>\n","      <td>17090.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>Company Invited</td>\n","      <td>1</td>\n","      <td>9.0</td>\n","      <td>Salaried</td>\n","      <td>Female</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>Basic</td>\n","      <td>3</td>\n","      <td>Divorced</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Executive</td>\n","      <td>17909.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>37</td>\n","      <td>Self Enquiry</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>Small Business</td>\n","      <td>Male</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>Basic</td>\n","      <td>4</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Executive</td>\n","      <td>18468.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfc6bec4-4104-4f06-864e-e16b824dab5d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dfc6bec4-4104-4f06-864e-e16b824dab5d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dfc6bec4-4104-4f06-864e-e16b824dab5d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-103516f0-cc66-4e15-8cb9-867f123626e4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-103516f0-cc66-4e15-8cb9-867f123626e4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-103516f0-cc66-4e15-8cb9-867f123626e4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 4888,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 18,\n        \"max\": 61,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          19,\n          27,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TypeofContact\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Company Invited\",\n          \"Self Enquiry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CityTier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DurationOfPitch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.316166022934667,\n        \"min\": 5.0,\n        \"max\": 127.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          13.0,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Free Lancer\",\n          \"Large Business\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfPersonVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowups\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ProductPitched\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Basic\",\n          \"King\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredPropertyStar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Single\",\n          \"Divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTrips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 22,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          20,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Passport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PitchSatisfactionScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OwnCar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfChildrenVisiting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Designation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Executive\",\n          \"VP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyIncome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5257.862921264005,\n        \"min\": 1000.0,\n        \"max\": 98678.0,\n        \"num_unique_values\": 2475,\n        \"samples\": [\n          24204.0,\n          36739.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["y.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:27.8568Z","iopub.execute_input":"2024-07-28T08:04:27.857251Z","iopub.status.idle":"2024-07-28T08:04:27.866314Z","shell.execute_reply.started":"2024-07-28T08:04:27.857212Z","shell.execute_reply":"2024-07-28T08:04:27.864951Z"},"trusted":true,"id":"B82N13Hiekps","executionInfo":{"status":"ok","timestamp":1722156495216,"user_tz":-330,"elapsed":49,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"a8276a52-c36e-4392-b935-e6c81d043132","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    1\n","1    0\n","2    1\n","3    0\n","4    0\n","Name: ProdTaken, dtype: category\n","Categories (2, int64): [0, 1]"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","X_train.shape, X_test.shape"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:32.288407Z","iopub.execute_input":"2024-07-28T08:04:32.288804Z","iopub.status.idle":"2024-07-28T08:04:32.303732Z","shell.execute_reply.started":"2024-07-28T08:04:32.288773Z","shell.execute_reply":"2024-07-28T08:04:32.302528Z"},"trusted":true,"id":"xkKBW9ESekps","executionInfo":{"status":"ok","timestamp":1722156495216,"user_tz":-330,"elapsed":45,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"53a5f4b5-b645-45b4-b02d-99f0e553ed14","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((3910, 18), (978, 18))"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["# Column Transformations - Encoding Categorical Features"],"metadata":{"id":"dZ1Dhxz_ekps"}},{"cell_type":"raw","source":["We are going to use AdaBoost for classification; hence scaling of numerical features is not necessary"],"metadata":{"id":"OQKy-IrEekpt"}},{"cell_type":"code","source":["# List of categorical columns\n","cat_cols = X_train.select_dtypes(include='category').columns.to_list()\n","cat_cols"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:54.667742Z","iopub.execute_input":"2024-07-28T08:04:54.668211Z","iopub.status.idle":"2024-07-28T08:04:54.677816Z","shell.execute_reply.started":"2024-07-28T08:04:54.668155Z","shell.execute_reply":"2024-07-28T08:04:54.676658Z"},"trusted":true,"id":"Eg2PV3pNekpt","executionInfo":{"status":"ok","timestamp":1722156495216,"user_tz":-330,"elapsed":42,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"c5d2644b-a5c1-4251-ae44-60fe87bf219d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['TypeofContact',\n"," 'CityTier',\n"," 'Occupation',\n"," 'Gender',\n"," 'ProductPitched',\n"," 'PreferredPropertyStar',\n"," 'MaritalStatus',\n"," 'Passport',\n"," 'OwnCar',\n"," 'Designation']"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["for column in cat_cols:\n","    print(column)\n","    print(df[column].value_counts(), end=\"\\n\\n\")"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:04:55.814912Z","iopub.execute_input":"2024-07-28T08:04:55.815342Z","iopub.status.idle":"2024-07-28T08:04:55.836373Z","shell.execute_reply.started":"2024-07-28T08:04:55.815309Z","shell.execute_reply":"2024-07-28T08:04:55.835249Z"},"trusted":true,"id":"HbBwJRcqekpt","executionInfo":{"status":"ok","timestamp":1722156495217,"user_tz":-330,"elapsed":41,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"d03afd6c-bfb0-48d6-86e2-6e8fe88253b0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["TypeofContact\n","TypeofContact\n","Self Enquiry       3469\n","Company Invited    1419\n","Name: count, dtype: int64\n","\n","CityTier\n","CityTier\n","1    3190\n","3    1500\n","2     198\n","Name: count, dtype: int64\n","\n","Occupation\n","Occupation\n","Salaried          2368\n","Small Business    2084\n","Large Business     434\n","Free Lancer          2\n","Name: count, dtype: int64\n","\n","Gender\n","Gender\n","Male      2916\n","Female    1972\n","Name: count, dtype: int64\n","\n","ProductPitched\n","ProductPitched\n","Basic           1842\n","Deluxe          1732\n","Standard         742\n","Super Deluxe     342\n","King             230\n","Name: count, dtype: int64\n","\n","PreferredPropertyStar\n","PreferredPropertyStar\n","3    3019\n","5     956\n","4     913\n","Name: count, dtype: int64\n","\n","MaritalStatus\n","MaritalStatus\n","Married     2340\n","Single      1598\n","Divorced     950\n","Name: count, dtype: int64\n","\n","Passport\n","Passport\n","0    3466\n","1    1422\n","Name: count, dtype: int64\n","\n","OwnCar\n","OwnCar\n","1    3032\n","0    1856\n","Name: count, dtype: int64\n","\n","Designation\n","Designation\n","Executive         1842\n","Manager           1732\n","Senior Manager     742\n","AVP                342\n","VP                 230\n","Name: count, dtype: int64\n","\n"]}]},{"cell_type":"raw","source":["None of the categorical features have ordinality. Therefore using OneHotEncoder on all of them."],"metadata":{"id":"dVU-6KkKekpt"}},{"cell_type":"code","source":["# Initializing the transformer\n","transformer = ColumnTransformer(transformers=[('categorical', OneHotEncoder(), cat_cols)],\n","                               remainder='passthrough')"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:05:09.949835Z","iopub.execute_input":"2024-07-28T08:05:09.950329Z","iopub.status.idle":"2024-07-28T08:05:09.955995Z","shell.execute_reply.started":"2024-07-28T08:05:09.950291Z","shell.execute_reply":"2024-07-28T08:05:09.954873Z"},"trusted":true,"id":"zFlQRWofekpu","executionInfo":{"status":"ok","timestamp":1722156495217,"user_tz":-330,"elapsed":38,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["# Fitting and Transforming X_train\n","X_train = transformer.fit_transform(X_train)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:05:11.477576Z","iopub.execute_input":"2024-07-28T08:05:11.47796Z","iopub.status.idle":"2024-07-28T08:05:11.512692Z","shell.execute_reply.started":"2024-07-28T08:05:11.47793Z","shell.execute_reply":"2024-07-28T08:05:11.511093Z"},"trusted":true,"id":"AZ0qiSYPekpu","executionInfo":{"status":"ok","timestamp":1722156495217,"user_tz":-330,"elapsed":37,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["pd.DataFrame(X_train).head()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:05:30.410044Z","iopub.execute_input":"2024-07-28T08:05:30.410507Z","iopub.status.idle":"2024-07-28T08:05:30.446276Z","shell.execute_reply.started":"2024-07-28T08:05:30.410474Z","shell.execute_reply":"2024-07-28T08:05:30.445228Z"},"trusted":true,"id":"Zs2LBkaAekpu","executionInfo":{"status":"ok","timestamp":1722156495217,"user_tz":-330,"elapsed":37,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"cb84dff6-8a5b-404d-bc13-53f4d8bb432e","colab":{"base_uri":"https://localhost:8080/","height":235}},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    0    1    2    3    4    5    6    7    8    9   ...   29   30    31  \\\n","0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  36.0   \n","1  0.0  1.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  ...  0.0  0.0  42.0   \n","2  0.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  ...  0.0  0.0  50.0   \n","3  0.0  1.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  ...  0.0  0.0  38.0   \n","4  1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  ...  0.0  0.0  44.0   \n","\n","     32   33   34   35   36   37       38  \n","0   7.0  2.0  5.0  3.0  4.0  1.0  21537.0  \n","1  21.0  3.0  4.0  6.0  4.0  2.0  21129.0  \n","2   7.0  3.0  4.0  4.0  4.0  1.0  22258.0  \n","3   7.0  3.0  5.0  3.0  5.0  1.0  24671.0  \n","4  35.0  4.0  2.0  6.0  3.0  3.0  23417.0  \n","\n","[5 rows x 39 columns]"],"text/html":["\n","  <div id=\"df-113ff256-d12b-404a-86eb-64b698b46b5a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>...</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>31</th>\n","      <th>32</th>\n","      <th>33</th>\n","      <th>34</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>36.0</td>\n","      <td>7.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>21537.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>42.0</td>\n","      <td>21.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>6.0</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>21129.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>50.0</td>\n","      <td>7.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>22258.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>38.0</td>\n","      <td>7.0</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td>1.0</td>\n","      <td>24671.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>44.0</td>\n","      <td>35.0</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>6.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>23417.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 39 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-113ff256-d12b-404a-86eb-64b698b46b5a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-113ff256-d12b-404a-86eb-64b698b46b5a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-113ff256-d12b-404a-86eb-64b698b46b5a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c52fa6ed-14b9-4633-98a2-8b37642e34c7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c52fa6ed-14b9-4633-98a2-8b37642e34c7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c52fa6ed-14b9-4633-98a2-8b37642e34c7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["# Transforming X_test\n","X_test = transformer.transform(X_test)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:05:37.245287Z","iopub.execute_input":"2024-07-28T08:05:37.245706Z","iopub.status.idle":"2024-07-28T08:05:37.263147Z","shell.execute_reply.started":"2024-07-28T08:05:37.245673Z","shell.execute_reply":"2024-07-28T08:05:37.261771Z"},"trusted":true,"id":"m9TqwxfAekpu","executionInfo":{"status":"ok","timestamp":1722156495217,"user_tz":-330,"elapsed":35,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["pd.DataFrame(X_test).head()"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:05:40.146726Z","iopub.execute_input":"2024-07-28T08:05:40.1472Z","iopub.status.idle":"2024-07-28T08:05:40.183155Z","shell.execute_reply.started":"2024-07-28T08:05:40.147148Z","shell.execute_reply":"2024-07-28T08:05:40.182041Z"},"trusted":true,"id":"73ghY7k0ekpv","executionInfo":{"status":"ok","timestamp":1722156495218,"user_tz":-330,"elapsed":35,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"7e5e2202-aeac-490c-a809-129bbd2feb96","colab":{"base_uri":"https://localhost:8080/","height":235}},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    0    1    2    3    4    5    6    7    8    9   ...   29   30    31  \\\n","0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  32.0   \n","1  0.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  46.0   \n","2  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  37.0   \n","3  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  43.0   \n","4  0.0  1.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  1.0  ...  0.0  0.0  25.0   \n","\n","     32   33   34   35   36   37       38  \n","0  13.0  2.0  5.0  1.0  2.0  1.0  19668.0  \n","1  11.0  3.0  4.0  1.0  5.0  1.0  20021.0  \n","2  22.0  3.0  4.0  5.0  5.0  0.0  21334.0  \n","3  36.0  3.0  6.0  6.0  3.0  2.0  22950.0  \n","4   7.0  4.0  4.0  3.0  4.0  3.0  21880.0  \n","\n","[5 rows x 39 columns]"],"text/html":["\n","  <div id=\"df-c274a2ec-70df-429f-8dde-73cfcd412419\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>...</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>31</th>\n","      <th>32</th>\n","      <th>33</th>\n","      <th>34</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>32.0</td>\n","      <td>13.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>19668.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>46.0</td>\n","      <td>11.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","      <td>1.0</td>\n","      <td>20021.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>37.0</td>\n","      <td>22.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>21334.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>43.0</td>\n","      <td>36.0</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>6.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>22950.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>25.0</td>\n","      <td>7.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>21880.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 39 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c274a2ec-70df-429f-8dde-73cfcd412419')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c274a2ec-70df-429f-8dde-73cfcd412419 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c274a2ec-70df-429f-8dde-73cfcd412419');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-13b4f0f6-4b18-4f1a-bec6-646d3a87b121\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13b4f0f6-4b18-4f1a-bec6-646d3a87b121')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-13b4f0f6-4b18-4f1a-bec6-646d3a87b121 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":44}]},{"cell_type":"markdown","source":["# Sample AdaBoost Model"],"metadata":{"id":"JYvPBvaWekpv"}},{"cell_type":"raw","source":["Default Parameters:\n","\n","AdaBoostClassifier(\n","    estimator=None,\n","    *,\n","    n_estimators=50,\n","    learning_rate=1.0,\n","    algorithm='SAMME.R',\n","    random_state=None,\n","    base_estimator='deprecated',\n",")"],"metadata":{"id":"J4osekktekpv"}},{"cell_type":"code","source":["# Initializing\n","sample_model = AdaBoostClassifier(random_state=42) # Using random_state for reproducibility"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:09:52.503579Z","iopub.execute_input":"2024-07-28T08:09:52.504423Z","iopub.status.idle":"2024-07-28T08:09:52.509316Z","shell.execute_reply.started":"2024-07-28T08:09:52.504379Z","shell.execute_reply":"2024-07-28T08:09:52.508128Z"},"trusted":true,"id":"qzvRjGdGekpv","executionInfo":{"status":"ok","timestamp":1722156495218,"user_tz":-330,"elapsed":33,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["# Fitting to X_train, y_train\n","sample_model.fit(X_train, y_train)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:09:54.390039Z","iopub.execute_input":"2024-07-28T08:09:54.390837Z","iopub.status.idle":"2024-07-28T08:09:54.733483Z","shell.execute_reply.started":"2024-07-28T08:09:54.390789Z","shell.execute_reply":"2024-07-28T08:09:54.732354Z"},"trusted":true,"id":"MlT6y-tCekpv","executionInfo":{"status":"ok","timestamp":1722156495218,"user_tz":-330,"elapsed":33,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"7ee05870-70b6-4ed2-e843-a58c352e3492","colab":{"base_uri":"https://localhost:8080/","height":74}},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["AdaBoostClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier(random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["# Sample Prediction\n","sample_y_pred = sample_model.predict(X_test)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:09:58.493352Z","iopub.execute_input":"2024-07-28T08:09:58.493751Z","iopub.status.idle":"2024-07-28T08:09:58.517432Z","shell.execute_reply.started":"2024-07-28T08:09:58.493718Z","shell.execute_reply":"2024-07-28T08:09:58.516248Z"},"trusted":true,"id":"6AIyJArNekpw","executionInfo":{"status":"ok","timestamp":1722156495218,"user_tz":-330,"elapsed":32,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":47,"outputs":[]},{"cell_type":"markdown","source":["## Sample Model Scores"],"metadata":{"id":"IEkwiVqbekpw"}},{"cell_type":"code","source":["sample_accuracy = accuracy_score(y_test, sample_y_pred)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:10:00.650938Z","iopub.execute_input":"2024-07-28T08:10:00.651376Z","iopub.status.idle":"2024-07-28T08:10:00.660223Z","shell.execute_reply.started":"2024-07-28T08:10:00.65134Z","shell.execute_reply":"2024-07-28T08:10:00.658962Z"},"trusted":true,"id":"9pCDSU14ekpw","executionInfo":{"status":"ok","timestamp":1722156495219,"user_tz":-330,"elapsed":32,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["print(\"Accuracy of sample model:\", sample_accuracy)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:10:05.117957Z","iopub.execute_input":"2024-07-28T08:10:05.118582Z","iopub.status.idle":"2024-07-28T08:10:05.12521Z","shell.execute_reply.started":"2024-07-28T08:10:05.118541Z","shell.execute_reply":"2024-07-28T08:10:05.123816Z"},"trusted":true,"id":"E1GIxxNvekpx","executionInfo":{"status":"ok","timestamp":1722156495219,"user_tz":-330,"elapsed":32,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"88313d7c-d0f5-40b6-bd36-d03af00315de","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of sample model: 0.8353783231083844\n"]}]},{"cell_type":"markdown","source":["# Hyperparameter Tuning"],"metadata":{"id":"uCjvcMyCekpx"}},{"cell_type":"raw","source":["Default Parameters:\n","\n","AdaBoostClassifier(\n","    estimator=None,\n","    *,\n","    n_estimators=50,\n","    learning_rate=1.0,\n","    algorithm='SAMME.R',\n","    random_state=None,\n","    base_estimator='deprecated',\n",")"],"metadata":{"id":"9IALID57ekpx"}},{"cell_type":"raw","source":["Parameters\n","----------\n","estimator : object, default=None\n","    The base estimator from which the boosted ensemble is built.\n","    Support for sample weighting is required, as well as proper\n","    ``classes_`` and ``n_classes_`` attributes. If ``None``, then\n","    the base estimator is :class:`~sklearn.tree.DecisionTreeClassifier`\n","    initialized with `max_depth=1`.\n","\n","    .. versionadded:: 1.2\n","       `base_estimator` was renamed to `estimator`.\n","\n","n_estimators : int, default=50\n","    The maximum number of estimators at which boosting is terminated.\n","    In case of perfect fit, the learning procedure is stopped early.\n","    Values must be in the range `[1, inf)`.\n","\n","learning_rate : float, default=1.0\n","    Weight applied to each classifier at each boosting iteration. A higher\n","    learning rate increases the contribution of each classifier. There is\n","    a trade-off between the `learning_rate` and `n_estimators` parameters.\n","    Values must be in the range `(0.0, inf)`.\n","\n","algorithm : {'SAMME', 'SAMME.R'}, default='SAMME.R'\n","    If 'SAMME.R' then use the SAMME.R real boosting algorithm.\n","    ``estimator`` must support calculation of class probabilities.\n","    If 'SAMME' then use the SAMME discrete boosting algorithm.\n","    The SAMME.R algorithm typically converges faster than SAMME,\n","    achieving a lower test error with fewer boosting iterations.\n","\n","random_state : int, RandomState instance or None, default=None\n","    Controls the random seed given at each `estimator` at each\n","    boosting iteration.\n","    Thus, it is only used when `estimator` exposes a `random_state`.\n","    Pass an int for reproducible output across multiple function calls.\n","    See :term:`Glossary <random_state>`.\n","\n","base_estimator : object, default=None\n","    The base estimator from which the boosted ensemble is built.\n","    Support for sample weighting is required, as well as proper\n","    ``classes_`` and ``n_classes_`` attributes. If ``None``, then\n","    the base estimator is :class:`~sklearn.tree.DecisionTreeClassifier`\n","    initialized with `max_depth=1`.\n","\n","    .. deprecated:: 1.2\n","        `base_estimator` is deprecated and will be removed in 1.4.\n","        Use `estimator` instead."],"metadata":{"id":"6SOLqoolekpx"}},{"cell_type":"code","source":["# Initializing Hyperparameters\n","param_grid = {'n_estimators': [50, 80, 100, 200],\n","              'learning_rate': [0.001, 0.01, 0.1, 1, 2],\n","              'algorithm' : ['SAMME', 'SAMME.R'],\n","             }"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:25:41.93534Z","iopub.execute_input":"2024-07-28T08:25:41.935766Z","iopub.status.idle":"2024-07-28T08:25:41.942218Z","shell.execute_reply.started":"2024-07-28T08:25:41.935731Z","shell.execute_reply":"2024-07-28T08:25:41.94091Z"},"trusted":true,"id":"mF-amYYKekpx","executionInfo":{"status":"ok","timestamp":1722156495219,"user_tz":-330,"elapsed":28,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["# Initializing Tuner\n","grid = GridSearchCV(estimator = AdaBoostClassifier(), param_grid=param_grid, scoring='accuracy', n_jobs=-1, cv=5)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:25:43.480688Z","iopub.execute_input":"2024-07-28T08:25:43.481124Z","iopub.status.idle":"2024-07-28T08:25:43.486672Z","shell.execute_reply.started":"2024-07-28T08:25:43.481087Z","shell.execute_reply":"2024-07-28T08:25:43.485558Z"},"trusted":true,"id":"KieCpjt3ekpy","executionInfo":{"status":"ok","timestamp":1722156495220,"user_tz":-330,"elapsed":28,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["# Finding best model\n","grid.fit(X_train, y_train)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:25:43.969736Z","iopub.execute_input":"2024-07-28T08:25:43.970148Z","iopub.status.idle":"2024-07-28T08:26:28.149755Z","shell.execute_reply.started":"2024-07-28T08:25:43.970117Z","shell.execute_reply":"2024-07-28T08:26:28.148604Z"},"trusted":true,"id":"rK1463uzekpy","executionInfo":{"status":"ok","timestamp":1722156593346,"user_tz":-330,"elapsed":98154,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"d5de9f49-ed1a-4760-9cfe-a489774f73cf","colab":{"base_uri":"https://localhost:8080/","height":117}},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5, estimator=AdaBoostClassifier(), n_jobs=-1,\n","             param_grid={'algorithm': ['SAMME', 'SAMME.R'],\n","                         'learning_rate': [0.001, 0.01, 0.1, 1, 2],\n","                         'n_estimators': [50, 80, 100, 200]},\n","             scoring='accuracy')"],"text/html":["<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=AdaBoostClassifier(), n_jobs=-1,\n","             param_grid={&#x27;algorithm&#x27;: [&#x27;SAMME&#x27;, &#x27;SAMME.R&#x27;],\n","                         &#x27;learning_rate&#x27;: [0.001, 0.01, 0.1, 1, 2],\n","                         &#x27;n_estimators&#x27;: [50, 80, 100, 200]},\n","             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=AdaBoostClassifier(), n_jobs=-1,\n","             param_grid={&#x27;algorithm&#x27;: [&#x27;SAMME&#x27;, &#x27;SAMME.R&#x27;],\n","                         &#x27;learning_rate&#x27;: [0.001, 0.01, 0.1, 1, 2],\n","                         &#x27;n_estimators&#x27;: [50, 80, 100, 200]},\n","             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["model = grid.best_estimator_\n","params = grid.best_params_\n","params # Best Parameters"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:26:29.686364Z","iopub.execute_input":"2024-07-28T08:26:29.686788Z","iopub.status.idle":"2024-07-28T08:26:29.695129Z","shell.execute_reply.started":"2024-07-28T08:26:29.68675Z","shell.execute_reply":"2024-07-28T08:26:29.693933Z"},"trusted":true,"id":"eEH2HU7iekpy","executionInfo":{"status":"ok","timestamp":1722156593347,"user_tz":-330,"elapsed":48,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"9ce4edb5-13b0-45eb-9f8e-acd2adb98d65","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'algorithm': 'SAMME.R', 'learning_rate': 1, 'n_estimators': 50}"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["## Model Scores and ROC Curve"],"metadata":{"id":"-Cm8cmLlekpz"}},{"cell_type":"code","source":["y_pred = model.predict(X_test)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:26:33.169111Z","iopub.execute_input":"2024-07-28T08:26:33.170014Z","iopub.status.idle":"2024-07-28T08:26:33.194793Z","shell.execute_reply.started":"2024-07-28T08:26:33.169978Z","shell.execute_reply":"2024-07-28T08:26:33.193797Z"},"trusted":true,"id":"z1gP9YLZekpz","executionInfo":{"status":"ok","timestamp":1722156593348,"user_tz":-330,"elapsed":42,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["accuracy = accuracy_score(y_test, y_pred)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:26:37.91843Z","iopub.execute_input":"2024-07-28T08:26:37.918864Z","iopub.status.idle":"2024-07-28T08:26:37.927264Z","shell.execute_reply.started":"2024-07-28T08:26:37.918825Z","shell.execute_reply":"2024-07-28T08:26:37.925916Z"},"trusted":true,"id":"CBsU08Rcekpz","executionInfo":{"status":"ok","timestamp":1722156593348,"user_tz":-330,"elapsed":41,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["print(\"Sample Model Accuracy:\", sample_accuracy, end=\"\\n\\n\")\n","print(\"Model Accuracy after hyperparameter tuning:\", accuracy)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:26:39.021299Z","iopub.execute_input":"2024-07-28T08:26:39.021684Z","iopub.status.idle":"2024-07-28T08:26:39.028437Z","shell.execute_reply.started":"2024-07-28T08:26:39.021655Z","shell.execute_reply":"2024-07-28T08:26:39.02712Z"},"trusted":true,"id":"6uoVtw7Gekpz","executionInfo":{"status":"ok","timestamp":1722156593349,"user_tz":-330,"elapsed":41,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"3f2d677f-7825-4e40-e4a9-195c245cd742","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Sample Model Accuracy: 0.8353783231083844\n","\n","Model Accuracy after hyperparameter tuning: 0.8353783231083844\n"]}]},{"cell_type":"markdown","source":["* The model score has remained the same at 0.83 even after hyperparameter tuning.\n","\n","* RandomForestClassifier had earlier given a better accuracy of 0.948, in our implemantation of that classifier - [Link to notebook](https://www.kaggle.com/code/sharooqfarzeenak/random-forest-classifier-holiday-package-dataset)"],"metadata":{"id":"2C-ThJEgekpz"}},{"cell_type":"code","source":["# Plotting the ROC Curve\n","\n","# Computing ROC-AUC Score\n","roc_auc = roc_auc_score(y_test, y_pred)\n","# Compute False postive rate, and True positive rate\n","fpr, tpr, thresholds = roc_curve(y_test, model.predict_proba(X_test)[:,1])\n","\n","\n","plt.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % (\"AdaBoostClassifier\", roc_auc))\n","# Custom settings for the plot\n","plt.plot([0, 1], [0, 1],'r--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('1-Specificity(False Positive Rate)')\n","plt.ylabel('Sensitivity(True Positive Rate)')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()"],"metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-07-28T08:30:57.998771Z","iopub.execute_input":"2024-07-28T08:30:57.99925Z","iopub.status.idle":"2024-07-28T08:30:58.333403Z","shell.execute_reply.started":"2024-07-28T08:30:57.999204Z","shell.execute_reply":"2024-07-28T08:30:58.33223Z"},"trusted":true,"id":"ChErOik0ekpz","executionInfo":{"status":"ok","timestamp":1722156593349,"user_tz":-330,"elapsed":37,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"97bf7f08-f338-4699-dc41-b54843cc4914","colab":{"base_uri":"https://localhost:8080/","height":472}},"execution_count":57,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["f1 = f1_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:31:04.768883Z","iopub.execute_input":"2024-07-28T08:31:04.769338Z","iopub.status.idle":"2024-07-28T08:31:04.789591Z","shell.execute_reply.started":"2024-07-28T08:31:04.769299Z","shell.execute_reply":"2024-07-28T08:31:04.788065Z"},"trusted":true,"id":"iiAy-skyekp0","executionInfo":{"status":"ok","timestamp":1722156593350,"user_tz":-330,"elapsed":36,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["print(\"Model Scores\\n\")\n","print(\"Accuracy:\", accuracy)\n","print(\"F1 Score:\", f1)\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"ROC-AUC Score:\", roc_auc)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:31:05.150822Z","iopub.execute_input":"2024-07-28T08:31:05.152162Z","iopub.status.idle":"2024-07-28T08:31:05.158929Z","shell.execute_reply.started":"2024-07-28T08:31:05.152119Z","shell.execute_reply":"2024-07-28T08:31:05.157628Z"},"trusted":true,"id":"HumJvWA-ekp0","executionInfo":{"status":"ok","timestamp":1722156593350,"user_tz":-330,"elapsed":36,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}},"outputId":"6054dd03-20e6-4275-d460-e090db8625a7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Scores\n","\n","Accuracy: 0.8353783231083844\n","F1 Score: 0.43109540636042404\n","Precision: 0.6630434782608695\n","Recall: 0.3193717277486911\n","ROC-AUC Score: 0.6399908194016645\n"]}]},{"cell_type":"markdown","source":["# Model Pickling"],"metadata":{"id":"XnPsYtFXekp0"}},{"cell_type":"code","source":["# Directory where model has to be stored\n","directory = 'Models'\n","# Path to pickle the model\n","path = os.path.join(os.getcwd(), directory, 'adaboostclassifier.pkl')\n","\n","with open(path, 'wb') as file_obj:\n","    pickle.dump(model, file_obj)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:31:22.123512Z","iopub.execute_input":"2024-07-28T08:31:22.123948Z","iopub.status.idle":"2024-07-28T08:31:22.134419Z","shell.execute_reply.started":"2024-07-28T08:31:22.123912Z","shell.execute_reply":"2024-07-28T08:31:22.132975Z"},"trusted":true,"id":"bh1UPfDaekp1","executionInfo":{"status":"ok","timestamp":1722156593350,"user_tz":-330,"elapsed":32,"user":{"displayName":"Sharooq Farzeen Abdul Khayoom","userId":"00254559679343624974"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["print(\"Model has been pickled at\", path)"],"metadata":{"execution":{"iopub.status.busy":"2024-07-28T08:31:22.695758Z","iopub.execute_input":"2024-07-28T08:31:22.696154Z","iopub.status.idle":"2024-07-28T08:31:22.702488Z","shell.execute_reply.started":"2024-07-28T08:31:22.696123Z","shell.execute_reply":"2024-07-28T08:31:22.701206Z"},"trusted":true,"id":"LaE_q3Pqekp1"},"execution_count":null,"outputs":[]}]}